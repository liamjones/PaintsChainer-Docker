From f857411247f93813fbef88786da17a9e339369c7 Mon Sep 17 00:00:00 2001
From: Itsukara <iitt21-t@yahoo.co.jp>
Date: Sun, 29 Jan 2017 06:17:42 +0900
Subject: [PATCH] fix to work without GPU (-g -1)

---
 cgi-bin/paint_x2_unet/cgi_exe.py | 62 +++++++++++++++++++++++++++++-----------
 1 file changed, 45 insertions(+), 17 deletions(-)

diff --git a/cgi-bin/paint_x2_unet/cgi_exe.py b/cgi-bin/paint_x2_unet/cgi_exe.py
index 33c381b..b43dc99 100755
--- a/cgi-bin/paint_x2_unet/cgi_exe.py
+++ b/cgi-bin/paint_x2_unet/cgi_exe.py
@@ -30,11 +30,13 @@ def __init__(self, gpu = 0):
         self.gpu = gpu
 
         print("load model")
-        cuda.get_device(self.gpu).use()
+        if self.gpu >= 0:
+          cuda.get_device(self.gpu).use()
         self.cnn_128 = unet.UNET()
         self.cnn = unet.UNET()
-        self.cnn_128.to_gpu()
-        self.cnn.to_gpu()
+        if self.gpu >= 0:
+            self.cnn_128.to_gpu()
+            self.cnn.to_gpu()
         lnn = lnet.LNET()
         #serializers.load_npz("./cgi-bin/wnet/models/model_cnn_128_df_4", cnn_128)
         #serializers.load_npz("./cgi-bin/paint_x2_unet/models/model_cnn_128_f3_2", cnn_128)
@@ -56,7 +58,8 @@ def save_as_img( self, array , name ):
         
 
     def liner(self, id_str):
-        cuda.get_device(self.gpu).use()
+        if self.gpu >= 0:
+            cuda.get_device(self.gpu).use()
 
         image1 = cv2.imread(path1, cv2.IMREAD_GRAYSCALE)
         image1 = np.asarray(image1,self._dtype)
@@ -64,16 +67,21 @@ def liner(self, id_str):
             image1 = image1[:, :, np.newaxis]
         img = image1.transpose(2, 0, 1)
         x = np.zeros((1, 3, img.shape[1], img.shape[2] )).astype('f')
-        x = cuda.to_gpu(x)
+        if self.gpu >= 0:
+            x = cuda.to_gpu(x)
 
         y = lnn.calc(Variable(x), test=True)
-        output = y.data.get()
+        if self.gpu >= 0:
+            output = y.data.get()
+        else:
+            output = y.data
 
         self.save_as_img( output[0], self.root + "line/"+id_str+".jpg" )
 
 
     def colorize_s( self, id_str, blur=0, s_size=128):
-        cuda.get_device(self.gpu).use()
+        if self.gpu >= 0:
+            cuda.get_device(self.gpu).use()
 
         dataset = ImageAndRefDataset([id_str+".png"],self.root+"line/",self.root+"ref/" ) 
         test_in_s, test_in = dataset.get_example(0, minimize=True, blur=blur, s_size=s_size)
@@ -81,30 +89,40 @@ def colorize_s( self, id_str, blur=0, s_size=128):
 
         x[0,:] = test_in_s
 
-        x = cuda.to_gpu(x)
+        if self.gpu >= 0:
+            x = cuda.to_gpu(x)
         y  = self.cnn_128.calc(Variable(x), test=True )
-        output = y.data.get()
+        if self.gpu >= 0:
+            output = y.data.get()
+        else:
+            output = y.data
 
         self.save_as_img( output[0], self.outdir_min + id_str + ".png" )
 
     def colorize_l( self, id_str ):
-        cuda.get_device(self.gpu).use()
+        if self.gpu >= 0:
+            cuda.get_device(self.gpu).use()
 
         dataset = ImageAndRefDataset([id_str+".png"],self.root+"line/",self.root+"out_min/" ) 
         test_in, test_in_ = dataset.get_example(0,minimize=False)
         x = np.zeros((1, 4, test_in.shape[1], test_in.shape[2] )).astype('f')
         x[0,:] = test_in
 
-        x = cuda.to_gpu(x)
+        if self.gpu >= 0:
+            x = cuda.to_gpu(x)
         y  = self.cnn.calc(Variable(x), test=True )
 
-        output = y.data.get()
+        if self.gpu >= 0:
+            output = y.data.get()
+        else:
+            output = y.data
 
         self.save_as_img( output[0], self.outdir + id_str + ".jpg" )
 
 
     def colorize( self, id_str, blur=0, s_size=128):
-        cuda.get_device(self.gpu).use()
+        if self.gpu >= 0:
+            cuda.get_device(self.gpu).use()
 
         dataset = ImageAndRefDataset([id_str+".png"],self.root+"line/",self.root+"ref/" ) 
         test_in_s, test_in = dataset.get_example(0,minimize=True)
@@ -117,20 +135,30 @@ def colorize( self, id_str, blur=0, s_size=128):
         x[0,:] = line
         input_bat[0,0,:] = line2
 
-        x = cuda.to_gpu(x)
+        if self.gpu >= 0:
+            x = cuda.to_gpu(x)
         y  = self.cnn_128.calc(Variable(x), test=True )
 
-        output = y.data.get()
+        if self.gpu >= 0:
+            output = y.data.get()
+        else:
+            output = y.data
 
         self.save_as_img( output[0], self.outdir_min + id_str +"_"+ str(0) + ".png" )
 
         for ch in range(3):
             input_bat[0,1+ch,:] = cv2.resize(output[0,ch,:], (test_in.shape[2], test_in.shape[1]), interpolation = cv2.INTER_CUBIC)
 
-        x = cuda.to_gpu(input_bat)
+        if self.gpu >= 0:
+            x = cuda.to_gpu(input_bat)
+        else:
+            x = input_bat
         y = self.cnn.calc(Variable(x), test=True )
 
-        output = y.data.get()
+        if self.gpu >= 0:
+            output = y.data.get()
+        else:
+            output = y.data
 
         self.save_as_img( output[0], self.outdir + id_str +"_"+ str(0) + ".jpg" )
 
